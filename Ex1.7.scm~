#lang racket

(define (average x y)
  (/ (+ x y) 2))

(define (square x)
  (* x x))

(define (improve guess x)
  (average guess (/ x guess)))


;Define a new good-enough procedure
;Watch how guess changes between iterations
;Stop when the change is very small
(define (good-enough?-v2 guess prevguess x)
  ())


(define (good-enough? guess x)
  (< (abs (- (square guess) x)) 0.0001))

(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x)
                 x)))
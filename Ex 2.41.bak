#lang scheme

;Accumulate
(define (accumulate op initial sequence)
   (if (null? sequence)
       initial
       (op (car sequence)
           (accumulate op initial (cdr sequence)))))


;Provided flatmap procedure
;Given a sequence and procedure
;Appends the results of mapping the procedure to the sequence
;Nested loop
(define (flatmap proc seq)
  (accumulate append null (map proc seq))) 

;Provided enumerate interval method
;Produces a list within provided interval
(define (enumerate-interval low high)
  (if (> low high)
      null
      (cons low (enumerate-interval (+ low 1) high))))


;Ex 2.41  Write a procedure to find all ordered triples of distinct positive integers 
;i, j, and k lessthan or equal to a given integer n that sum to a given integer 
;s.

;Start by finding unique triplets

(define (unique-triplets n)
  (flatmap ;
   (lambda (i)  ;For each element (i) from the list 1 to n
      (map (lambda (j) (list i j)) ;Map (list i j) seq, where seq is the list 1 to i-1
          (enumerate-interval 1 (- i 1))))
   (enumerate-interval 1 n))) ;Using a base sequence of 1 to n


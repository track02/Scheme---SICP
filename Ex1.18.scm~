#lang racket

;Create a recursive multiplication procedure
;With a log(n) complexity, wrt input value b



;Iterative multiplication procedure
;Now b is repeatedly halved until equal to 1
;A new step added when b doubles in size
(define (* a b)
  (iter-multiply a b 0))
  

(define (double i)
(+ i i))

(define (halve i)
(/ i 2))

(define (iter-multiply a b c)
  (cond ((= b 0) 0)
        ((= b 1) a)
        ((= (remainder b 2) 0) (fast-multiply (double a) (halve b)))
        (else (+ a (fast-multiply a (- b 1)))))

